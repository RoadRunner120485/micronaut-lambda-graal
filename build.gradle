plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
//    id "jp.classmethod.aws.lambda" version "0.39"
    id "org.jetbrains.kotlin.jvm" version "1.3.61"
    id "org.jetbrains.kotlin.kapt" version "1.3.61"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.61"
    id "application"
}



version "0.1"
group "hello.world"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    developmentOnly platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-function-aws"
    implementation "io.micronaut:micronaut-security-jwt"
    implementation "javax.annotation:javax.annotation-api"
    implementation("io.micronaut.aws:micronaut-function-aws-custom-runtime") {
        exclude group: "com.fasterxml.jackson.module", module: "jackson-module-afterburner"
    }
    implementation("io.micronaut.aws:micronaut-function-aws-api-proxy") {
        exclude group: "com.fasterxml.jackson.module", module: "jackson-module-afterburner"
    }
    implementation("org.slf4j:slf4j-api:1.7.30") {
        force = true
    }
    developmentOnly("io.micronaut:micronaut-http-server-netty") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    kapt "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut:micronaut-validation"
    kapt "io.micronaut:micronaut-security"
    kaptTest "io.micronaut:micronaut-inject-java"

    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    runtimeOnly("net.logstash.logback:logstash-logback-encoder:6.3")
    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8"
    testImplementation "io.micronaut.test:micronaut-test-kotlintest"
    testImplementation "io.mockk:mockk:1.9.3"
    testImplementation "io.kotlintest:kotlintest-runner-junit5:3.3.2"
}

test.classpath += configurations.developmentOnly
shadowJar {
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
}

test {
    useJUnitPlatform()
}

allOpen {
	annotation("io.micronaut.aop.Around")
}

compileKotlin {
	kotlinOptions {
	    jvmTarget = "1.8" 
	    //Will retain parameter names for Java reflection
	    javaParameters = true 
	}
}

compileTestKotlin {
	kotlinOptions {
	    jvmTarget = "1.8" 
	    javaParameters = true 
	}
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs("-noverify", "-XX:TieredStopAtLevel=1", "-Dcom.sun.management.jmxremote")
mainClassName = "de.sturmm.todo.Application"
applicationDefaultJvmArgs = [""]

jar {
    manifest {
        attributes "Main-Class": mainClassName
    }
}

